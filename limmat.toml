num_worktrees = 8

resources = [
    # Don't spin up a billion VMs at once
    { name = "qemu_throttle", count = 8 },
]

[[tests]]
name = "build_min"
cache = "by_tree"
command = """
set -eux
exec 2>&1

make -j tinyconfig
scripts/config -e 64BIT -e -WERROR
make -j olddefconfig
scripts/config -e VMLINUX_OBJTOOL_STRICT
CCACHE_SLOPPINESS=time_macros make -sj8 vmlinux CC='ccache gcc' KBUILD_BUILD_TIMESTAMP= 2>&1
"""

# Quick feedback for build failures
[[tests]]
name = "build_asi_min"
cache = "by_tree"
command = """
set -eux
exec 2>&1

make -j tinyconfig
scripts/config -e "64BIT" -e WERROR -e CPU_MITIGATIONS \
        -e VIRTUALIZATION -e KVM -e KVM_INTEL -e KVM_AMD \
        -d HYPERV -d CONFIG_PARAVIRT -e MITIGATION_ADDRESS_SPACE_ISOLATION

scripts/config -e VMLINUX_OBJTOOL_STRICT

if git grep -q ADDRESS_SPACE_ISOLATION ":!gconfigs/*"; then
    grep ADDRESS_SPACE_ISOLATION .config
fi
CCACHE_SLOPPINESS=time_macros make -sj8 vmlinux CC='ccache gcc' KBUILD_BUILD_TIMESTAMP= 2>&1
"""

[[tests]]
name = "bzImage_asi"
cache = "by_tree"
depends_on = ["build_asi_min"]  # Hack for prioritizing quick feedback
command = """
set -eux
exec 2>&1

# TODO: we can probably use a smaller config, but my manual hacking didn't work with vmtest.
make -j defconfig
scripts/config -e VMLINUX_OBJTOOL_STRICT
scripts/config -e "64BIT" -e CPU_MITIGATIONS \
        -e VIRTUALIZATION -e KVM -e KVM_INTEL -e KVM_AMD \
        -d HYPERV -d CONFIG_PARAVIRT -e MITIGATION_ADDRESS_SPACE_ISOLATION
make -j olddefconfig
if git grep -q ADDRESS_SPACE_ISOLATION ":!gconfigs/*"; then
    grep ADDRESS_SPACE_ISOLATION .config
fi
CCACHE_SLOPPINESS=time_macros make -sj8 bzImage CC='ccache gcc' KBUILD_BUILD_TIMESTAMP= 2>&1
make kernelrelease > $LIMMAT_ARTIFACTS/kernelrelease.txt
cp arch/x86/boot/bzImage $LIMMAT_ARTIFACTS
cp .config $LIMMAT_ARTIFACTS/config.txt
"""

[[tests]]
name = "build_kselftests"
cache = "by_tree"
command = """
set -eux
exec 2>&1

make -sj8 headers
make -sj100 CC='ccache gcc' -C tools/testing/selftests \
  TARGETS=kvm LDFLAGS=-static install INSTALL_PATH=$LIMMAT_ARTIFACTS
"""

# Commands I tried that didn't work (TARGETS=mm)
# Some of them might pass on certain platforms, have only tried with gLinux host rootfs.
# ./run_vmtests.sh -t mmap
# ./run_vmtests.sh -t gup_test
# ./run_vmtests.sh -t mlock
# ./run_vmtests.sh -t cow
# Flaky:
# ./run_vmtests.sh -t mremap
# Doesn't work at all:
# ./run_vmtests.sh -t userfaultfd
# Require kernel config changes:
# ./run_vmtests.sh -t "vmalloc hmm ksm"

# I tried before with mm tests, which can be run via run_vmtests.sh, but they're
# completely broken.
# Several KVM tests fail in QEMU and kselftest doesn't offer a way to skip
# tests, so for now just run a small selection.
[[tests]]
name = "vmtest-kvm-asi"
cache = "by_tree"
depends_on = ["bzImage_asi", "build_kselftests"]
resources = ["qemu_throttle"]
requires_worktree = false
error_exit_codes = [123]
command = """
set -eux
exec 2>&1

if ! which -s vmtest; then
    echo "vmtest binary not in PATH, see README.md"
    exit 123
fi

rootfs="$(dirname $LIMMAT_CONFIG)/mkosi-rootfs/image/"
if [[ ! -e "$rootfs/usr/bin" ]]; then
    echo "rootfs not set up at $rootfs, see README.md"
    exit 123
fi

kernel="$LIMMAT_ARTIFACTS_bzImage_asi"/bzImage

# Embed the config here so we get the benefit of local-ci's cache invalidation logic
# Per https://github.com/danobi/vmtest/blob/master/docs/config.md,
# Anyway, vmtest interprets paths relative to the location of its config file,
# instead of the actual CWD. So we need the config to be in the CWD.
# If you enable more tests in the config below you'll also need to update TARGETS above.
cat <<EOF > $LIMMAT_ARTIFACTS/vmtest.toml
[[target]]
name = "vmtest boot - host rootfs"
kernel = "${kernel}"
rootfs = "$(dirname $LIMMAT_CONFIG)/mkosi-rootfs/image"
kernel_args = "asi=on pti=off"
command = \"""
set -ex
set -o pipefail

# We actually want --per-test-log but I wanna be able to test on kernels before that flag existed.
# --summary will try to write to /mnt/kselftest_install which is read-only so that doesn't work either.
/mnt/kselftest_install/run_kselftest.sh \
    -t kvm:kvm_create_max_vcpus -t kvm:userspace_io_test \
    | tee /tmp/kselftest.log

# run_kselftest.sh doesn't fail when tests fail. Grep log instead.
if grep "not ok" /tmp/kselftest.log; then exit 1; fi
exit 0
\"""
[target.vm.mounts]
"/mnt/kselftest_install" = { host_path = "$LIMMAT_ARTIFACTS_build_kselftests" }
"/mnt/kselftest_logs" = { host_path = "$LIMMAT_ARTIFACTS", writable = true }

EOF

# unshare -r makes vmtest see the rootfs as if the files are owned by root.
unshare -r vmtest --config $LIMMAT_ARTIFACTS/vmtest.toml
"""

[[tests]]
name = "kunit_build"
cache = "by_tree"
command = """
set -eux
exec 2>&1

git clean -fdx -e .vscode >/dev/null # mrproper isn't always good enough

# Combine ASI and mm Kunit tests. Neither of these exist upstream (Jan 2025).
cat arch/x86/mm/.kunitconfig mm/.kunitconfig > $LIMMAT_ARTIFACTS/.kunitconfig || true
[ -s $LIMMAT_ARTIFACTS/.kunitconfig ] || exit 0

tools/testing/kunit/kunit.py build --arch=x86_64  \
    --jobs=8 --kunitconfig=$LIMMAT_ARTIFACTS/.kunitconfig  \
    --make_options "LLVM=1" --make_options "CC=ccache clang"
mkdir -p $LIMMAT_ARTIFACTS/arch/x86/boot/
cp .kunit/arch/x86/boot/bzImage $LIMMAT_ARTIFACTS/arch/x86/boot/
"""

[[tests]]
name = "kunit_tcg"
cache = "by_tree"
depends_on = ["kunit_build"]
command = """
set -ex
exec 2>&1
[ -e $LIMMAT_ARTIFACTS_kunit_build/arch/x86/boot/bzImage ] || exit 0

tools/testing/kunit/kunit.py exec --arch=x86_64 --timeout=10 \
    --kunitconfig=$LIMMAT_ARTIFACTS_kunit_build/.kunitconfig \
    --qemu_args "-smp 2 -m 8G" \
    --build_dir "$LIMMAT_ARTIFACTS_kunit_build" \
    --kernel_args "asi=on numa=fake=2U"
"""

# We often see test failures that only reproduce under TCG or KVM, presumably
# since that changes the timing characteristics so much. So, just run both.
[[tests]]
name = "kunit_kvm"
cache = "by_tree"
depends_on = ["kunit_build"]
command = """
set -ex
exec 2>&1
[ -e $LIMMAT_ARTIFACTS_kunit_build/arch/x86/boot/bzImage ] || exit 0

tools/testing/kunit/kunit.py exec --arch=x86_64 --timeout=10 \
    --kunitconfig=$LIMMAT_ARTIFACTS_kunit_build/.kunitconfig \
    --qemu_args "-smp 2 --enable-kvm -m 8G" \
    --build_dir "$LIMMAT_ARTIFACTS_kunit_build" \
    --kernel_args "asi=on numa=fake=2U"
"""

[[tests]]
name = "checkpatch"
# https://lore.kernel.org/all/20250115-checkpatch-ignore-v2-0-8467750bf713@google.com/
# Run the checked out version so we can get my patch from above
requires_worktree = false # Just run whatever version of checkpatch is currently in the main worktree.
# With this checkpatch feature the result depends on more than just the commit hash.
cache = "no_caching"
command = ["python3", "-c", """
import subprocess
import os

LIMMAT_COMMIT=os.getenv("LIMMAT_COMMIT")

def log_n1(format):
    result = subprocess.run(
        ["git", "log", "-n1", "--format=" + format, LIMMAT_COMMIT],
        capture_output=True, text=True, check=True,
    )
    return result.stdout.strip()

# Linus doesn't sign off his release commits lol.
author = log_n1("%an")
if author == "Linus Torvalds":
    print("Ignoring patch from Linus")
    exit(0)

# Don't complain about b4 cover-letter commits.
raw_msg = log_n1("%B")
if "\\n--- b4-submit-tracking ---\\n" in raw_msg:
    print("Ignoring b4-submit-tracking patch")
    exit(0)

print(raw_msg)

ignore = [
    "FILE_PATH_CHANGES",      # Annoying
    "AVOID_BUG",              # yeah yeah yeah
    "VSPRINTF_SPECIFIER_PX",  # Usually I'm doing this deliberately.
    "COMMIT_LOG_LONG_LINE",   # Too noisy
    "MACRO_ARG_UNUSED",       # Bullshit
]

# Ignore more stuff on Google prodkernel trees.
if os.path.exists("./gconfigs"):
    ignore += ["GERRIT_CHANGE_ID", "GIT_COMMIT_ID", "MISSING_SIGN_OFF"]

# Get Checkpatch-args tag from commit message.
commit_args = log_n1("%(trailers:key=Checkpatch-args,valueonly)").strip().split()

cmd = (
    ["scripts/checkpatch.pl", "--git", "--show-types", f"--ignore={','.join(ignore)}"]
    + commit_args + [LIMMAT_COMMIT]
)
print(f"Running: {cmd}")

subprocess.run(cmd, check=True)
"""]