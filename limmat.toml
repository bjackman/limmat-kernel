num_worktrees = 8

resources = [
    # Don't spin up a billion VMs at once
    { name = "qemu_throttle", count = 8 },
]

[[tests]]
name = "build_min"
cache = "by_tree"
command = """
set -eux
exec 2>&1

make -j tinyconfig
scripts/config -e 64BIT -e -WERROR -e OBJTOOL_WERROR
make -j olddefconfig
CCACHE_SLOPPINESS=time_macros make -sj8 vmlinux CC='ccache gcc' KBUILD_BUILD_TIMESTAMP= 2>&1
"""

[[tests]]
name = "bzImage"
cache = "by_tree"
depends_on = ["build_min"]  # Hack for prioritizing quick feedback
command = """
set -eux
exec 2>&1

# TODO: we can probably use a smaller config, but my manual hacking didn't work with vmtest.
make -j defconfig
CCACHE_SLOPPINESS=time_macros make -sj8 bzImage CC='ccache gcc' KBUILD_BUILD_TIMESTAMP= 2>&1

make kernelrelease > $LIMMAT_ARTIFACTS/kernelrelease.txt
cp arch/x86/boot/bzImage $LIMMAT_ARTIFACTS
cp .config $LIMMAT_ARTIFACTS/config.txt
"""

[[tests]]
name = "build_kselftests"
cache = "by_tree"
command = """
set -eux
exec 2>&1

make -sj8 headers
make -sj100 CC='ccache gcc' -C tools/testing/selftests \
  TARGETS="mm" LDFLAGS=-static install INSTALL_PATH=$LIMMAT_ARTIFACTS
"""

# Commands I tried that didn't work (TARGETS=mm)
# Some of them might pass on certain platforms, have only tried with gLinux host rootfs.
# ./run_vmtests.sh -t mmap
# ./run_vmtests.sh -t gup_test
# ./run_vmtests.sh -t mlock
# ./run_vmtests.sh -t cow
# Flaky:
# ./run_vmtests.sh -t mremap
# Doesn't work at all:
# ./run_vmtests.sh -t userfaultfd
# Require kernel config changes:
# ./run_vmtests.sh -t "vmalloc hmm ksm"

# I tried before with mm tests, which can be run via run_vmtests.sh, but they're
# completely broken.
# Several KVM tests fail in QEMU and kselftest doesn't offer a way to skip
# tests, so for now just run a small selection.
[[tests]]
name = "kselftests"
cache = "by_tree"
depends_on = ["bzImage", "build_kselftests"]
resources = ["qemu_throttle"]
requires_worktree = false
error_exit_codes = [123]
command = """
set -eux
exec 2>&1

if ! which -s vng; then
    echo "vng binary not in PATH, see README.md"
    exit 123
fi

rootfs="$(dirname $LIMMAT_CONFIG)/mkosi-rootfs/image/"
if [[ ! -e "$rootfs/usr/bin" ]]; then
    echo "rootfs not set up at $rootfs, see README.md"
    exit 123
fi

kernel="$LIMMAT_ARTIFACTS_bzImage"/bzImage

# Can't mount multiple directories using vng
# https://github.com/arighi/virtme-ng/issues/237
# Workaround by copying everything into a single directory
cp -r "$LIMMAT_ARTIFACTS_build_kselftests" "$LIMMAT_ARTIFACTS/kselftest_install"

# Embed the runner script here so we get the benefit of local-ci's cache
# invalidation logic
cat <<EOF > "$LIMMAT_ARTIFACTS/run.sh"
set -ex

mkdir /mnt/kselftest_logs

# We actually want --per-test-log but I wanna be able to test on kernels before that flag existed.
# --summary will try to write to /mnt/kselftest_install which is read-only so that doesn't work either.
cd /mnt/kselftest_install/mm
for type in mmap gup_test userfaultfd compaction migration; do
    ./run_vmtests.sh -t \\$type | tee /mnt/kselftest_logs/vmtests_\\$type.log || true
done

# run_kselftest.sh doesn't fail when tests fail. Grep log instead.
if grep "not ok" /mnt/kselftest_logs/*.log; then exit 1; fi
exit 0
EOF

chmod +x "$LIMMAT_ARTIFACTS/run.sh"

unshare -r vng --verbose --user root --root "$(dirname $LIMMAT_CONFIG)/mkosi-rootfs/image"  \
    --rwdir=/mnt="$LIMMAT_ARTIFACTS" -- "/mnt/run.sh"
"""

[[tests]]
name = "kunit"
cache = "by_tree"
command = """
set -eux
exec 2>&1

git clean -fdx -e .vscode >/dev/null # mrproper isn't always good enough

# Random sample of tests
tools/testing/kunit/kunit.py run --kunitconfig ./lib/kunit/.kunitconfig
tools/testing/kunit/kunit.py run --kunitconfig ./security/landlock/.kunitconfig
tools/testing/kunit/kunit.py run --kunitconfig ./fs/ext4/.kunitconfig
"""

[[tests]]
name = "checkpatch"
# https://lore.kernel.org/all/20250115-checkpatch-ignore-v2-0-8467750bf713@google.com/
# Run the checked out version so we can get my patch from above
requires_worktree = false # Just run whatever version of checkpatch is currently in the main worktree.
# With this checkpatch feature the result depends on more than just the commit hash.
cache = "no_caching"
command = ["python3", "-c", """
import subprocess
import os

LIMMAT_COMMIT=os.getenv("LIMMAT_COMMIT")

def log_n1(format):
    result = subprocess.run(
        ["git", "log", "-n1", "--format=" + format, LIMMAT_COMMIT],
        capture_output=True, text=True, check=True,
    )
    return result.stdout.strip()

# Linus doesn't sign off his release commits lol.
author = log_n1("%an")
if author == "Linus Torvalds":
    print("Ignoring patch from Linus")
    exit(0)

# Don't complain about b4 cover-letter commits.
raw_msg = log_n1("%B")
if "\\n--- b4-submit-tracking ---\\n" in raw_msg:
    print("Ignoring b4-submit-tracking patch")
    exit(0)

print(raw_msg)

ignore = [
    "FILE_PATH_CHANGES",      # Annoying
    "AVOID_BUG",              # yeah yeah yeah
    "VSPRINTF_SPECIFIER_PX",  # Usually I'm doing this deliberately.
    "COMMIT_LOG_LONG_LINE",   # Too noisy
    "MACRO_ARG_UNUSED",       # Bullshit
    "CONFIG_DESCRIPTION",     # Bullshit
    "COMMIT_MESSAGE",         # yeah yeah yeah
    "LOGGING_CONTINUATION",   # yeah yeah yeah
    "COMPLEX_MACRO",          # yeah yeah yeah
    "LONG_LINE",              # yeah yeah yeah
]

# Ignore more stuff on Google prodkernel trees.
if os.path.exists("./gconfigs"):
    ignore += ["GERRIT_CHANGE_ID", "GIT_COMMIT_ID", "MISSING_SIGN_OFF"]

# Get Checkpatch-ignore tag from commit message.
commit_ignore = log_n1("%(trailers:key=Checkpatch-ignore,valueonly)").strip().split()
print(commit_ignore)
ignore += commit_ignore
print(ignore)

cmd = [
    "scripts/checkpatch.pl", "--git", "--show-types",
    f"--ignore={','.join(ignore)}", "--codespell", LIMMAT_COMMIT
]
print(f"Running: {cmd}")

subprocess.run(cmd, check=True)
"""]