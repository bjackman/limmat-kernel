num_worktrees = 8

resources = [
    { name = "kbs", count = 8 },
    { name = "devrez_machine", count = 1 },
    # Don't spin up a billion VMs at once
    { name = "qemu_throttle", count = 8 },
]

# Don't need this at the moment, save the CPU bandwidth.
#
# [[tests]]
# name = "bzImage_defconfig"
# cache = "by_tree"
# command = """
# set -eux
# exec 2>&1

# make -sj8 defconfig
# scripts/config -e CONFIG_LOCALVERSION_AUTO -e CONFIG_IKCONFIG -e CONFIG_IKCONFIG_PROC \
#     -e CONFIG_DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT -e DEBUG_ENTRY
# # Note this config is added by my kernel patch
# scripts/config -e VMLINUX_OBJTOOL_STRICT
# make -j olddefconfig
# CCACHE_SLOPPINESS=time_macros make -sj8 bzImage CC='ccache gcc' KBUILD_BUILD_TIMESTAMP= 2>&1
# make kernelrelease > $LIMMAT_ARTIFACTS/kernelrelease.txt
# cp arch/x86/boot/bzImage $LIMMAT_ARTIFACTS
# cp .config $LIMMAT_ARTIFACTS/config.txt
# """

[[tests]]
name = "build_min"
cache = "by_tree"
command = """
set -eux
exec 2>&1

make -j tinyconfig
scripts/config -e VMLINUX_OBJTOOL_STRICT
CCACHE_SLOPPINESS=time_macros make -sj8 vmlinux CC='ccache gcc' KBUILD_BUILD_TIMESTAMP= 2>&1
"""

# Quick feedback for build failures
[[tests]]
name = "build_asi_min"
cache = "by_tree"
command = """
set -eux
exec 2>&1

make -j tinyconfig
scripts/config -e "64BIT" -e CPU_MITIGATIONS \
        -e VIRTUALIZATION -e KVM -e KVM_INTEL -e KVM_AMD \
        -d HYPERV -d CONFIG_PARAVIRT -e MITIGATION_ADDRESS_SPACE_ISOLATION

scripts/config -e VMLINUX_OBJTOOL_STRICT

if git grep -q ADDRESS_SPACE_ISOLATION ":!gconfigs/*"; then
    grep ADDRESS_SPACE_ISOLATION .config
fi
CCACHE_SLOPPINESS=time_macros make -sj8 vmlinux CC='ccache gcc' KBUILD_BUILD_TIMESTAMP= 2>&1
"""

# TODO: This hardcodes the location of the kconfig file.
[[tests]]
name = "bzImage_asi"
cache = "by_tree"
depends_on = ["build_asi_min"]  # Hack for prioritizing quick feedback
command = """
set -eux
exec 2>&1

# TODO: we can probably use a smaller config, but my manual hacking didn't work with vmtest.
make -j defconfig
scripts/config -e VMLINUX_OBJTOOL_STRICT
scripts/config -e "64BIT" -e CPU_MITIGATIONS \
        -e VIRTUALIZATION -e KVM -e KVM_INTEL -e KVM_AMD \
        -d HYPERV -d CONFIG_PARAVIRT -e MITIGATION_ADDRESS_SPACE_ISOLATION
make -j olddefconfig
if git grep -q ADDRESS_SPACE_ISOLATION ":!gconfigs/*"; then
    grep ADDRESS_SPACE_ISOLATION .config
fi
CCACHE_SLOPPINESS=time_macros make -sj8 bzImage CC='ccache gcc' KBUILD_BUILD_TIMESTAMP= 2>&1
make kernelrelease > $LIMMAT_ARTIFACTS/kernelrelease.txt
cp arch/x86/boot/bzImage $LIMMAT_ARTIFACTS
cp .config $LIMMAT_ARTIFACTS/config.txt
"""


# I fixed https://github.com/danobi/vmtest/issues/96.
# I can't find any kselftests that actually work lol (I think the BPF selftests
# work but I can't figure out how to run them).
# So, just boot the bloody thing.
# This does it using the host rootfs.
#
# Commands I tried that didn't work:
# cd /mnt/kselftest_install/mm/
# KSELFTEST_RUN_VMTESTS_SH_ARGS="-t mmap" /mnt/kselftest_install/run_kselftest.sh --test mm:run_vmtests.sh
# All of these have test failures and you can't disable individual tests:
# Some of them might pass on certain platforms, have only tried with gLinux host rootfs.
# ./run_vmtests.sh -t mmap
# ./run_vmtests.sh -t gup_test
# ./run_vmtests.sh -t mlock
# ./run_vmtests.sh -t cow
# Flaky:
# ./run_vmtests.sh -t mremap
# Doesn't work at all:
# ./run_vmtests.sh -t userfaultfd
# Require kernel config changes:
# ./run_vmtests.sh -t "vmalloc hmm ksm"
#
# make -sj8 CC='ccache gcc' headers
# make -sj8 CC='ccache gcc' -C tools/testing/selftests install TARGETS=mm
# [target.vm.mounts]
# "/mnt/kselftest_install" = { host_path = "./tools/testing/selftests/kselftest_install" }
[[tests]]
name = "vmtests-boot-asi"
cache = "by_tree"
depends_on = ["bzImage_asi"]
resources = ["qemu_throttle"]
requires_worktree = false
command = """
set -eux
exec 2>&1

kernel="$LIMMAT_ARTIFACTS_bzImage_asi"/bzImage

# Embed the config here so we get the benefit of local-ci's cache invalidation logic
# Per https://github.com/danobi/vmtest/blob/master/docs/config.md,
# Anyway, vmtest interprets paths relative to the location of its config file,
# instead of the actual CWD. So we need the config to be in the CWD.
# If you enable more tests in the config below you'll also need to update TARGETS above.
cat <<EOF > vmtest.toml
[[target]]
name = "vmtest boot - host rootfs"
kernel = "${kernel}"
rootfs = "/usr/local/google/home/jackmanb/src/limmat-kernel/mkosi-rootfs/image"
kernel_args = "asi=on pti=off"
command = "exit 0"
EOF

# unshare -r makes vmtest see the rootfs as if the files are owned by root.
unshare -r vmtest --config vmtest.toml
"""

# Not sure why this is failing,
# make[9]: *** No rule to make target '/tmp/local-ci-worktreeED0q6g/tools/include/linux/compiler.h', needed by '/tmp/bindep-pkg-asi/out/b1a95caadfa1fa9b9bb9ff90b5ce9d12c7170e7e/tools/objtool/libsubcmd/exec-cmd.o'.  Stop.
# [[tests]]
# name = "bindeb-pkg-asi"
# command = """
# set -e
# exec 2>&1
#
# git clean -fdx -e .vscode # mrproper isn't always good enough
#
# # Hack: we don't get to write to the artifact output directory nor have a temp
# # directory that is cleaned up. So we use a special tmpdir and then delort it
# # afterwards. Otherwise you can very quickly generated many hundreds of
# # goobibytes and fill yer disk.
# # TODO maybe there's actually a way to get it to drop the bindeb-pkg directly
# # into the directory but build locally in-tree instead of with O=?
# OUTPUT=/tmp/bindep-pkg-asi/out/$LIMMAT_COMMIT
# mkdir -p $OUTPUT
# cp ~/src/linux/config-ubuntu-6.10-asi $OUTPUT/.config
# make O=$OUTPUT olddefconfig
# make -sj8 bindeb-pkg CC='ccache gcc' KBUILD_BUILD_TIMESTAMP= O=$OUTPUT
# rm -rf $OUTPUT
# """

[[tests]]
name = "gbuild2"
requires_worktree = false
resources = ["kbs"]
command = "gbuild2 --remote --noneed_local_outputs GTESTS=1 CONFIG=dbg --commit=$LIMMAT_COMMIT 2>&1"

[[tests]]
name = "gbuild2-kdump"
requires_worktree = false
resources = ["kbs"]
command = "gbuild2 --remote --noneed_local_outputs GTESTS=1 CONFIG=kdump --commit=$LIMMAT_COMMIT 2>&1"

[[tests]]
name = "asi_kunit_build"
cache = "by_tree"
command = """
set -e
exec 2>&1
[ -f arch/x86/mm/.kunitconfig ] || exit 0
git clean -fdx -e .vscode >/dev/null # mrproper isn't always good enough

tools/testing/kunit/kunit.py build --arch=x86_64  \
    --jobs=8 --kunitconfig=arch/x86/mm/.kunitconfig  \
    --make_options "LLVM=1" --make_options "CC=ccache clang"

mkdir -p $LIMMAT_ARTIFACTS/arch/x86/boot/
cp .kunit/arch/x86/boot/bzImage $LIMMAT_ARTIFACTS/arch/x86/boot/
"""

[[tests]]
name = "asi_kunit_tcg"
cache = "by_tree"
depends_on = ["asi_kunit_build"]
command = """
set -ex
exec 2>&1
[ -e $LIMMAT_ARTIFACTS_asi_kunit_build/arch/x86/boot/bzImage ] || exit 0

tools/testing/kunit/kunit.py exec --arch=x86_64 --timeout=10 \
    --kunitconfig=arch/x86/mm/.kunitconfig --qemu_args "-smp 2" \
    --build_dir "$LIMMAT_ARTIFACTS_asi_kunit_build" \
    --kernel_args "asi=on panic_on_warn=1"
"""

# We often see test failures that only reproduce under TCG or KVM, presumably
# since that changes the timing characteristics so much. So, just run both.
[[tests]]
name = "asi_kunit_kvm"
cache = "by_tree"
depends_on = ["asi_kunit_build"]
command = """
set -ex
exec 2>&1
[ -e $LIMMAT_ARTIFACTS_asi_kunit_build/arch/x86/boot/bzImage ] || exit 0

tools/testing/kunit/kunit.py exec --arch=x86_64 --timeout=10 \
    --kunitconfig=arch/x86/mm/.kunitconfig --qemu_args "-smp 2 --enable-kvm" \
    --build_dir "$LIMMAT_ARTIFACTS_asi_kunit_build" \
    --kernel_args "asi=on panic_on_warn=1"
"""

[[tests]]
name = "checkpatch"
requires_worktree = false # Just run whatever version of checkpatch is currently in the main worktree.
cache = "by_commit"
command = """
set -ex
exec 2>&1

# Linus doesn't sign off his release commits lol.
author="$(git log -n1 $LIMMAT_COMMIT --format=%an)"
if [[ "$author" == "Linus Torvalds" ]]; then
    exit 0
fi

# Don't complain about b4 cover-letter commits.
if git log -n1 $LIMMAT_COMMIT --format="%B" | grep -q -- "--- b4-submit-tracking ---"; then
    exit 0
fi

scripts/checkpatch.pl --git $LIMMAT_COMMIT --ignore=GERRIT_CHANGE_ID,FILE_PATH_CHANGES,AVOID_BUG \
    --codespell --show-types $(git log -n1 --format='%(trailers:key=Checkpatch-args,valueonly)' $LIMMAT_COMMIT)

if git show $LIMMAT_COMMIT | grep -q '\\+.*TODO'; then
    echo "TODO added to code"
    exit 1
fi
if git log -n 1 --format=%B $LIMMAT_COMMIT | grep -q TODO; then
    echo "TODO in commit message"
    exit 1
fi
"""